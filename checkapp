<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.32">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.7"/>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.67">
    <script>node() {
def DockerImage = &quot;webserver:1.2&quot;

stage(&apos;Pre&apos;) { // Run pre-build steps
  cleanWs()
  sh &quot;docker rm -f webserver || true&quot;
}

stage(&apos;Git&apos;) { // Get code from GitLab repository
  git branch: &apos;master&apos;,
    url: &apos;https://github.com/royselekter/flask-http.git&apos;
}

stage(&apos;Build&apos;) { // Run the docker build
  sh &quot;docker build --tag ${DockerImage} .&quot;
}
stage(&apos;Run&apos;) { // Run the built image
  sh &quot;docker run -d --name webserver --rm -p 8081:5000 ${DockerImage}; sleep 5&quot;
}

stage(&apos;Test&apos;) { // Run tests on container
  def dockerOutput = sh (
      script: &apos;curl http://192.168.15.30:8081/goaway&apos;,
      //script: &apos;curl http://localhost:8081/goaway&apos;,
      returnStdout: true
      ).trim()
//  sh &quot;docker rm -f webserver&quot;

  if ( dockerOutput == &apos;GO AWAY!&apos; ) {
      currentBuild.result = &apos;SUCCESS&apos;
  } else {
      currentBuild.result = &apos;FAILURE&apos;
      sh &quot;echo Webserver returned ${dockerOutput}&quot;
  }
  return
}
stage(&apos;Push&apos;) { // Push the built image to docker hub
   withDockerRegistry(credentialsId: &apos;docker-hub&apos;) {
      sh &quot;docker tag ${DockerImage} royselekter/${DockerImage}&quot;
      sh &quot;docker push royselekter/${DockerImage}&quot;
   }
}

stage ('Deploy') { // deploy to k8s
       sshagent(credentials : ['ssh-for-k8s']) {
           sh 'pwd'
           sh 'ssh -o StrictHostKeyChecking=no -i ~jenkins/.ssh/id_rsa  ubuntu@192.168.10.40 ""kubectl apply -f ~ubuntu/k8s_repo/k8s-pod.yml""'
       }
   }     
